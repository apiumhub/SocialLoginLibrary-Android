apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion build_versions.target_sdk
    publishNonDefault true
    defaultConfig {
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [fbLoginProtocolScheme: ""]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "social"

    productFlavors {

        sdks {
            dimension "social"
        }

        rest {
            dimension "social"
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        sdks.java.srcDirs += 'src/sdks/kotlin'
        rest.java.srcDirs += 'src/rest/kotlin'
    }

}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':linkedin-sdk')

    implementation deps.kotlin.stdlib

    implementation deps.support.app_compat_v7

    sdksApi deps.social.facebook
    sdksApi deps.social.google
    sdksApi deps.social.wechat

    restImplementation deps.retrofit.runtime
    restImplementation deps.retrofit.rxjava
    restImplementation deps.retrofit.gson
}

allprojects {
    addRepos(repositories)

    apply plugin: 'maven-publish'

    group 'com.apiumhub.library'
    version = externalVersion

    publishing {
        publications {
            library(MavenPublication) {
                groupId 'com.apiumhub.library'
                artifactId 'social-android'
                version externalVersion
                artifact("$buildDir/outputs/aar/library-sdks-release.aar")
//                artifact(sourceJar)
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.sdksApi.allDependencies.each {
                        if(it.group != null && (it.name != null || "unspecified" == it.name) && it.version != null)
                        {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name 'NexusApiumSNAPSHOT'
                url snapshotsRepositoryUrl
                credentials {
                    username = deployRepoUsername
                    password = deployRepoPassword
                }
            }
            maven {
                name 'NexusApiumRELEASE'
                url releaseRepositoryUrl
                credentials {
                    username = deployRepoUsername
                    password = deployRepoPassword
                }
                maven {
                    url "https://maven.google.com"
                }

            }
        }
    }
}